dist: trusty
sudo: required

matrix:
    include:
        - os: linux
        - env: OS_TYPE=fedora
        - env: INSTALL_REQUIREMENTS="dnf repolist; dnf install -y perl shellcheck devscripts gcc meson sudo langpacks-zh_CN ed ncurses vi"

        - os: linux
        - env: OS_TYPE=opensuse
        - env: INSTALL_REQUIREMENTS="zypper refresh; zypper in -y perl shellcheck devscripts gcc python3 python3-pip ninja sudo glibc-locale glibc-devel ed ncurses-utils vim"

        - os: linux
        - env: OS_TYPE=dauchida/freebsd
        - env: INSTALL_REQUIREMENTS="pkg install -y perl shellcheck devscripts"

        - os: linux
        - env: OS_TYPE=debian:11
        - env: INSTALL_REQUIREMENTS="sudo apt-get update -qq; sudo apt-get upgrade -y; sudo apt-get install -y -qq perl shellcheck devscripts"

        - os: linux
        - env: OS_TYPE=ubuntu:22.04
        - env: INSTALL_REQUIREMENTS="sudo apt-get update -qq; sudo apt-get upgrade -y; sudo apt-get install -y -qq perl shellcheck devscripts"

        - os: osx
        - env: OS_TYPE=osx
        - env: INSTALL_REQUIREMENTS="brew update; brew install perl shellcheck devscripts"

before_install:
    - [[ $TRAVIS_OS_NAME == "linux" ]] && docker pull ${OS_TYPE}

install:
    - [[ $TRAVIS_OS_NAME == "osx" ]] && docker run -d $OS /bin/sh -c "provision container if you do not have a prebuilt image and are instead using base images"
    - [[ $TRAVIS_OS_NAME == "linux" ]] && docker run -d $OS /bin/sh -c "provision container if you do not have a prebuilt image and are instead using base images"

script:
    # Test for osx and run different build or prep commands:
    - [[ $TRAVIS_OS_NAME == "osx" ]] && docker run -d $OS /bin/sh -c "prove" && docker run -d $OS /bin/sh -c "./virtualmin-install.sh" 
    - [[ $TRAVIS_OS_NAME == "linux" ]] && docker run -d $OS /bin/sh -c "prove"&& docker run -d $OS /bin/sh -c "./virtualmin-install.sh" 
